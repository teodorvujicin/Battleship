type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/coordinate/Coordinate.java
  visible: true
  text: |
    package battleship.coordinate;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.Objects;


    public class Coordinate {
        private int x;
        private int y;


        public Coordinate() {
        }

        public Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public void setX(String coordinates) {
            this.x = Integer.parseInt(coordinates.split("(?<=\\D)(?=\\d)")[1]);
        }

        public void setY(String coordinates) {
            this.y = coordinateLetters.getOrDefault(coordinates.charAt(0), 0);
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Coordinate that = (Coordinate) o;
            return x == that.x && y == that.y;
        }

        @Override
        public int hashCode() {
            return Objects.hash(x, y);
        }

        private static final Map<Character, Integer> coordinateLetters = new HashMap<>() {{
            for (int i = 1; i <= 26; i++) {
                put((char) (i + 64), i);
            }
        }};
    }
  learner_created: true
- name: src/battleship/ship/Ship.java
  visible: true
  text: |+
    package battleship.ship;

    import battleship.coordinate.Coordinate;

    import java.util.HashSet;
    import java.util.Objects;
    import java.util.Set;

    public class Ship {
        private final String shipClass;
        private final int size;
        private Coordinate startCoordinates;
        private Coordinate endCoordinates;
        private final Set<Coordinate> coordinates;
        private ShipType type;

        public Ship(String shipClass, int size) {
            this.shipClass = shipClass;
            this.size = size;
            this.coordinates = new HashSet<>();
        }

        public boolean isOnCoordinate(Coordinate coordinate) {
            return this.coordinates.contains(coordinate);
        }

        public void addCoordinate(Coordinate coordinate) {
            this.coordinates.add(coordinate);
        }

        public void removeCoordinate(Coordinate coordinate) {
            this.coordinates.remove(coordinate);
        }

        public boolean isSunk() {
            return this.coordinates.isEmpty();
        }

        public void setType() {
            if (startCoordinates.getY() == endCoordinates.getY()) {
                this.type = ShipType.VERTICAL;
            } else if (startCoordinates.getX() == endCoordinates.getX()) {
                this.type = ShipType.HORIZONTAL;
            }
        }

        public boolean isVertical() {
            return this.type == ShipType.VERTICAL;
        }

        public boolean isHorizontal() {
            return this.type == ShipType.HORIZONTAL;
        }

        public boolean coordinatesMatchSize() {
            if (this.isVertical()) {
                return Math.abs(endCoordinates.getX() - startCoordinates.getX()) == this.size - 1;
            } else if (this.isHorizontal()) {
                return Math.abs(endCoordinates.getY() - startCoordinates.getY()) == this.size - 1;
            } else {
                return false;
            }
        }

        public String getShipClass() {
            return shipClass;
        }

        public int getSize() {
            return size;
        }

        public Coordinate getStartCoordinates() {
            return startCoordinates;
        }

        public void setStartCoordinates(Coordinate startCoordinates) {
            this.startCoordinates = startCoordinates;
        }

        public Coordinate getEndCoordinates() {
            return endCoordinates;
        }

        public void setEndCoordinates(Coordinate endCoordinates) {
            this.endCoordinates = endCoordinates;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Ship ship = (Ship) o;
            return size == ship.size && Objects.equals(shipClass, ship.shipClass) && Objects.equals(startCoordinates, ship.startCoordinates) && Objects.equals(endCoordinates, ship.endCoordinates) && Objects.equals(coordinates, ship.coordinates) && type == ship.type;
        }

        @Override
        public int hashCode() {
            return Objects.hash(shipClass, size, startCoordinates, endCoordinates, coordinates, type);
        }
    }

    enum ShipType {
        HORIZONTAL, VERTICAL
    }

  learner_created: true
- name: src/battleship/battlefield/Battlefield.java
  visible: true
  text: |
    package battleship.battlefield;

    import battleship.coordinate.Coordinate;
    import battleship.ship.Ship;

    import java.util.*;

    public class Battlefield {
        public final String[][] battlefield;

        private final int rows;
        private final int columns;
        private final Set<Coordinate> forbiddenCoordinates;
        private final Set<Coordinate> shipCoordinates;
        private final List<Ship> ships;

        public Battlefield(int rows, int columns) {
            this.rows = rows;
            this.columns = columns;
            this.battlefield = new String[rows][columns];
            this.forbiddenCoordinates = new HashSet<>();
            this.shipCoordinates = new HashSet<>();
            this.ships = new ArrayList<>();

            createBattlefield(this.battlefield, rows, columns);
        }

        public boolean hitShip(String unformattedShotCoordinates) {
            Coordinate shotCoordinate = new Coordinate();
            shotCoordinate.setX(unformattedShotCoordinates);
            shotCoordinate.setY(unformattedShotCoordinates);

            return this.isCoordinateTaken(shotCoordinate);
        }

        public void removeHitShipCoordinate(String unformattedCoordinate) {
            Coordinate coordinate = new Coordinate();
            coordinate.setX(unformattedCoordinate);
            coordinate.setY(unformattedCoordinate);

            for (Ship ship : this.ships) {
                if (ship.isOnCoordinate(coordinate)) {
                    ship.removeCoordinate(coordinate);
                    this.shipCoordinates.remove(coordinate);

                    if (!this.shipCoordinates.isEmpty()) {
                        if (ship.isSunk()) {
                            System.out.println("You sank a ship! Specify a new target:");
                        } else {
                            System.out.println("You hit a ship! Try again:");
                        }
                        break;
                    }
                }
            }
        }

        public boolean hasShips() {
            return !this.shipCoordinates.isEmpty();
        }

        public boolean positionShip(Ship ship, String startUnformattedCoordinates, String endUnformattedCoordinates) {
            // Get coordinates from user
            Coordinate startCoordinates = new Coordinate();
            startCoordinates.setX(startUnformattedCoordinates);
            startCoordinates.setY(startUnformattedCoordinates);

            Coordinate endCoordinates = new Coordinate();
            endCoordinates.setX(endUnformattedCoordinates);
            endCoordinates.setY(endUnformattedCoordinates);

            if (this.forbiddenCoordinates.contains(startCoordinates) || this.forbiddenCoordinates.contains(endCoordinates)) {
                System.out.println("Error! You placed it too close to another one. Try again:");
                return false;
            }

            if (startCoordinates.getX() > endCoordinates.getX() || startCoordinates.getY() > endCoordinates.getY()) {
                ship.setStartCoordinates(endCoordinates);
                ship.setEndCoordinates(startCoordinates);
            } else {
                ship.setStartCoordinates(startCoordinates);
                ship.setEndCoordinates(endCoordinates);
            }

            ship.setType();

            if (ship.coordinatesMatchSize()) {
                if (ship.isVertical()) {
                    for (int i = ship.getStartCoordinates().getX(); i <= ship.getEndCoordinates().getX(); i++) {
                        this.markCoordinateAsTaken(i, ship.getStartCoordinates().getY());
                        ship.addCoordinate(new Coordinate(i, ship.getStartCoordinates().getY()));
                        this.shipCoordinates.add(new Coordinate(i, ship.getStartCoordinates().getY()));
                        addForbiddenCoordinates(new Coordinate(i, ship.getStartCoordinates().getY()));
                    }
                } else if (ship.isHorizontal()) {
                    for (int i = ship.getStartCoordinates().getY(); i <= ship.getEndCoordinates().getY(); i++) {
                        this.markCoordinateAsTaken(ship.getStartCoordinates().getX(), i);
                        ship.addCoordinate(new Coordinate(ship.getStartCoordinates().getX(), i));
                        this.shipCoordinates.add(new Coordinate(ship.getStartCoordinates().getX(), i));
                        addForbiddenCoordinates(new Coordinate(ship.getEndCoordinates().getX(), i));
                    }
                }
                this.ships.add(ship);
                return true;

            } else if (!ship.isVertical() && !ship.isHorizontal()) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;

            } else {
                System.out.println("Error! Wrong length of the " + ship.getShipClass() + "! Try again:");
                return false;
            }
        }

        private void addForbiddenCoordinates(Coordinate coordinate) {
            this.forbiddenCoordinates.add(coordinate);
            this.forbiddenCoordinates.add(new Coordinate(coordinate.getX(), coordinate.getY() + 1));
            this.forbiddenCoordinates.add(new Coordinate(coordinate.getX(), coordinate.getY() - 1));
            this.forbiddenCoordinates.add(new Coordinate(coordinate.getX() + 1, coordinate.getY()));
            this.forbiddenCoordinates.add(new Coordinate(coordinate.getX() - 1, coordinate.getY()));
        }

        private boolean isCoordinateTaken(Coordinate coordinate) {
            int x = coordinate.getX();
            int y = coordinate.getY();

            return this.battlefield[y][x].equals("O");
        }

        private void markCoordinateAsTaken(int x, int y) {
            this.battlefield[y][x] = "O";
        }

        public void registerHit(String unformattedCoordinate) {
            Coordinate coordinate = new Coordinate();
            coordinate.setX(unformattedCoordinate);
            coordinate.setY(unformattedCoordinate);

            int x = coordinate.getX();
            int y = coordinate.getY();

            this.battlefield[y][x] = "X";
        }

        public void registerMiss(String unformattedCoordinate) {
            Coordinate coordinate = new Coordinate();
            coordinate.setX(unformattedCoordinate);
            coordinate.setY(unformattedCoordinate);

            int x = coordinate.getX();
            int y = coordinate.getY();

            this.battlefield[y][x] = "M";

            System.out.println("You missed. Try again:");
        }

        public void printToConsole() {
            for (int i = 0; i < this.rows; i++) {
                for (int j = 0; j < this.columns; j++) {
                    System.out.print(this.battlefield[i][j] + " ");
                }
                System.out.println();
            }
        }

        private static void createBattlefield(String[][] battlefield, int rows, int columns) {
            battlefield[0][0] = " ";

            createColumns(columns, battlefield);
            createRows(rows, battlefield);
            createFogOfWar(rows, columns, battlefield);
        }

        private static void createColumns(int columns, String[][] battlefield) {
            // Populate the first row with numbers 1-10
            for (int i = 1; i < columns; i++) {
                battlefield[0][i] = String.valueOf(i);
            }
        }

        private static void createRows(int rows, String[][] battlefield) {
            // Populate the first row with letters A-J
            for (int i = 1; i < rows; i++) {
                battlefield[i][0] = Character.toString((char) (i + 64));
            }
        }

        private static void createFogOfWar(int rows, int columns, String[][] battlefield) {
            // Populate the rest of the table with "~"
            for (int i = 1; i < rows; i++) {
                for (int j = 1; j < columns; j++) {
                    battlefield[i][j] = "~";
                }
            }
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Battlefield that = (Battlefield) o;
            return rows == that.rows && columns == that.columns && Arrays.deepEquals(battlefield, that.battlefield) && Objects.equals(forbiddenCoordinates, that.forbiddenCoordinates) && Objects.equals(shipCoordinates, that.shipCoordinates) && Objects.equals(ships, that.ships);
        }

        @Override
        public int hashCode() {
            int result = Objects.hash(rows, columns, forbiddenCoordinates, shipCoordinates, ships);
            result = 31 * result + Arrays.deepHashCode(battlefield);
            return result;
        }

        public boolean checkCoordinates(String unformattedCoordinate) {
            Coordinate coordinate = new Coordinate();
            coordinate.setX(unformattedCoordinate);
            coordinate.setY(unformattedCoordinate);

            int x = coordinate.getX();
            int y = coordinate.getY();

            return x > 0 && x < this.columns && y > 0 && y < this.rows;
        }
    }
  learner_created: true
- name: src/battleship/player/Player.java
  visible: true
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  learner_created: true
- name: src/battleship/ship/ShipOrientation.java
  visible: true
  learner_created: true
- name: src/battleship/ship/ShipType.java
  visible: true
  learner_created: true
- name: src/battleship/constants/Constants.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Tue, 31 Jan 2023 10:58:52 UTC"
record: -1
